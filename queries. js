// queries.js
// MongoDB queries for plp_bookstore database

use plp_bookstore;

// ===============================
// Task 2: Basic CRUD Operations
// ===============================

// 1. Find all books in a specific genre (e.g., 'Fiction')
db.books.find({ genre: "Fiction" });

// 2. Find books published after a certain year (e.g., after 1950)
db.books.find({ published_year: { $gt: 1950 } });

// 3. Find books by a specific author (e.g., 'George Orwell')
db.books.find({ author: "George Orwell" });

// 4. Update the price of a specific book (example: '1984')
db.books.updateOne(
  { title: "1984" },
  { $set: { price: 11.99 } }
);

// 5. Delete a book by its title (example: 'Animal Farm')
db.books.deleteOne({ title: "Animal Farm" });

// ===============================
// Task 3: Advanced Queries
// ===============================

// 6. Find books that are in stock and published after 2010
db.books.find({ in_stock: true, published_year: { $gt: 2010 } });

// 7. Projection - return only title, author, and price
db.books.find({}, { _id: 0, title: 1, author: 1, price: 1 });

// 8. Sort by price ascending
db.books.find().sort({ price: 1 });

// 9. Sort by price descending
db.books.find().sort({ price: -1 });

// 10. Pagination (5 books per page) - example: page 2 (skip first 5)
db.books.find().skip(5).limit(5);

// ===============================
// Task 4: Aggregation Pipelines
// ===============================

// Average price by genre
db.books.aggregate([
  { $group: { _id: "$genre", averagePrice: { $avg: "$price" } } },
  { $sort: { averagePrice: -1 } }
]);

// Author with the most books
db.books.aggregate([
  { $group: { _id: "$author", totalBooks: { $sum: 1 } } },
  { $sort: { totalBooks: -1 } },
  { $limit: 1 }
]);

// Group books by publication decade and count them
db.books.aggregate([
  { $project: { decade: { $multiply: [{ $floor: { $divide: ["$published_year", 10] } }, 10] } } },
  { $group: { _id: "$decade", count: { $sum: 1 } } },
  { $sort: { _id: 1 } }
]);

// ===============================
// Task 5: Indexing
// ===============================

// Create an index on the title field
db.books.createIndex({ title: 1 });

// Create a compound index on author and published_year
db.books.createIndex({ author: 1, published_year: -1 });

// Use explain() to show performance stats (example)
db.books.find({ title: "The Hobbit" }).explain("executionStats");
